{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ae6260c9",
   "metadata": {},
   "source": [
    "# Computer Lab - Semester 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3bc623d",
   "metadata": {},
   "source": [
    "## Solution of ODE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4acae2d3",
   "metadata": {},
   "source": [
    "#### Euler's Method\n",
    "\n",
    "Any equation which involves derivative of a function is called a **differential equation**. Order of the differential equation is defined by the order of the derivative of the function present in the differential equation. A first order linear differential equation is represented by\n",
    "\n",
    "\\begin{equation}\n",
    "\\frac{dy}{dx}=f(x,y(x))\n",
    "\\end{equation}\n",
    "\n",
    "To solve this type of equation numerically, we are given an initial condition, i.e. the value of the function at the initial point. If $x=a$ is the starting point, then we must get the value $y(a)$ at $x=a$. Let $y(a)=c$. Geometrically, it is quite obvious that the function $y(x)$ must pass through $(a,c)$. Therefore, the equation of tangent line drawn at the point (a,c) in xy coordinate plane can be written as -\n",
    "\n",
    "\\begin{align}\n",
    "y - c = \\frac{dy}{dx}\\mid_{(a,c)}(x - a)\n",
    "\\end{align}\n",
    "\n",
    "Now, $\\frac{dy}{dx}\\mid_{(a,c)}=f(a,c)$. Setting, $x-a=h$ as step size or distance between two neighbouring points, we can write the above equation as\n",
    "\n",
    "\\begin{align}\n",
    "y(a+h) \\approx c + f(a,c)\\cdot h\n",
    "\\end{align}\n",
    "\n",
    "Thus the solution passes through a point which is nearly equal to $(a+h, c+f(a,c)h)$. We now repeat this tangent line approximation with (a,c) with successive points separated by a distance $h$. We must replace $(a,c)$ by $(a+h, c+f(a,c)h)$. Keep repeating this tangent line approximation at successive points $x=a,~a+h,~a+2h,\\cdots,b$, we get the values of $y(x)$ for all the points between $x=a$ to $x=b$.\n",
    "\n",
    "Algebraically, the basic idea can be understood in the following way. From calculas, the derivative of a function at a point is given by\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{dy}{dx} = \\lim_{h\\to 0}\\frac{y(x+h)-y(x)}{h}\n",
    "\\end{align}\n",
    "\n",
    "Here $h>0$ and very small. The above equation can be approximately written as\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{dy}{dx} \\approx \\frac{y(x+h)-y(x)}{h}\n",
    "\\end{align}\n",
    "\n",
    "This equation can be solved for $f(x+h)$ to give\n",
    "\n",
    "\\begin{align}\n",
    "f(x+h) \\approx y(x) + h\\cdot f(x,y(x))\n",
    "\\end{align}\n",
    "\n",
    "If we call $y(x+h)$ as \"new value\", then we can write the above equation as\n",
    "\n",
    "\\begin{align}\n",
    "y_{\\text{new}} = y +h \\cdot f(x,y)\n",
    "\\end{align}\n",
    "\n",
    "We can demonstrate the implementation of Euler's method by using the following tabular format -\n",
    "\n",
    "| $x$     | $y$                 | $$h\\cdot f(x,y)$$|\n",
    "| :---    | :---                | :---           |\n",
    "|$a$      | $c$                 | $$h\\cdot f(a,c)$$| \n",
    "|$a+h$    | $$c + h\\cdot f(a,c)$$ | $\\cdots$       |\n",
    "|$a + 2h$ | $\\cdots$            |                | \n",
    "|$\\vdots$ |                     |                |\n",
    "|$b$      | ???                 | X              |\n",
    "\n",
    "The goal is to fill out all the blanks of the table except X entry and find the ??? entry, which is the Eulerâ€™s method approximation for $y(b)$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc1d6a9a",
   "metadata": {},
   "source": [
    "Consider the following ODE\n",
    "\\begin{align}\n",
    "\\frac{dy}{dx}=\\frac{y+x}{y-x},\\hspace{0.5cm}y(0)=1\n",
    "\\end{align}\n",
    "Find the value y at x = 0.6, taking the step size = 0.2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c7a0c289",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x         y    \n",
      "------------------\n",
      "0.0    1.000\n",
      "0.2    1.200\n",
      "0.4    1.480\n",
      "0.6    1.828\n",
      "------------------\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Discretize the independent variable 'x'\n",
    "x_init, x_final, step = 0, 0.6, 0.2\n",
    "x = np.arange(x_init, x_final+step, step)\n",
    "\n",
    "#Create array for unknown or dependent variable\n",
    "y = np.zeros(len(x))\n",
    "y[0] = 1\n",
    "\n",
    "# Define helper functions\n",
    "def f(x,y):\n",
    "\tslope = (y+x)/(y-x)\n",
    "\treturn slope\n",
    "\n",
    "def Euler(x, y, h):\n",
    "\ty_new = y + h*f(x, y)\n",
    "\treturn y_new\n",
    "\n",
    "# use recursive relation to find the 'y' values at different grid points of 'x'\n",
    "h = step\n",
    "for i in range(len(x)-1):\n",
    "    y[i+1] = Euler(x[i], y[i], h)\n",
    "\n",
    "# Tabulating the result\n",
    "y = y.reshape([-1,1])\n",
    "x = x.reshape([-1,1])\n",
    "\n",
    "val = np.hstack([x, y])\n",
    "\n",
    "print(\"{0:10s}{1:5s}\".format('x','y'))\n",
    "print('------------------')\n",
    "for i in range(len(val[:,0])):\n",
    "    print(\"{0:0.1f} {1:8.3f}\".format(val[:,0][i], val[:,1][i]))\n",
    "print('------------------')\n",
    "\n",
    "# Graphical demonstration\n",
    "plt.plot(x, y, ls=':', color='k', markersize=4)\n",
    "plt.plot(x, y, 'ro', markersize=4)\n",
    "plt.xlabel('x', fontsize=14)\n",
    "plt.ylabel('y', fontsize=14)\n",
    "\n",
    "# Displaying values next to point\n",
    "for i in range(len(y)):\n",
    "\tplt.text(x[i], y[i]+0.05, \"%0.2f\" %y[i], ha=\"center\")\n",
    "plt.ylim(0, 2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e4066ec",
   "metadata": {},
   "source": [
    "#### Modified Euler method\n",
    "\n",
    "The biggest shortcoming in Euler's method is that the derivative or slope estimated at the begining of the interval is applied through out the interval which generally, is not the case. As a modification, the derivative is estimated at the begining and at the end of the interval and average of the two values is used to estimate the value at the next stage. So, if we consider an interval between $x$ and $x+h$ and the value of $y(x)$ is known, then to estimate the value at $x+h$, we calculate the slope at $x$, which is $\\frac{dy}{dx}$ and estimate $y(x+h)$ which is given by\n",
    "\n",
    "\\begin{align}\n",
    "y(x+h) = y(x) + h\\cdot f(x,y)\n",
    "\\end{align}\n",
    "\n",
    "Let us call this value of $y(x+h)$ as predicted value of $y$ or $y_p$. Using the value of $y_p$, we estimate the slope at $x+h$ which is given by $f(x+h, y_p)$. Let us call\n",
    "\n",
    "\\begin{align}\n",
    "&k_1 = f(x,y)\\\\\n",
    "&k_2 = f(x+h, y_p)\n",
    "\\end{align}\n",
    "\n",
    "We use the average of $k_1$ and $k_2$ to estimate the value at $x+h$, given by\n",
    "\n",
    "\\begin{align}\n",
    "y(x+h) = y(x) + \\left( \\frac{k_1+k_2}{2}\\right) \\cdot h\n",
    "\\end{align}\n",
    "\n",
    "This value of $y(x+h)$ is known as *corrector* value or $y_c$.\n",
    "\n",
    "The previous problem can be solved by modified Euler method by modifying the code in the Euler function. The code snippet is given below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "350d43f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def modEuler(x, y, h):\n",
    "    k1 = f(x, y)\n",
    "    y_p = y + k1*h\n",
    "    k2 = f(x+h, y_p)\n",
    "    y_c = y + h*(k1+k2)/2\n",
    "    return y_c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e78b75cd",
   "metadata": {},
   "source": [
    "#### Runge Kutta Method of Second Order\n",
    "\n",
    "In this method. we estimate the slope at the middle of the interval $(x, x+h)$. Let $f(x, y)$ be the slope at $x$ and the slope at $x+h/2$ be $f(x+h/2, y+k1/2)$. Considering this slope is better estimate for the interval, we use it for the whole interval to estimate the value at $x+h$. This can be shown below -\n",
    "\\begin{align}\n",
    "&k_1 = f(x,y) \\nonumber\\\\\n",
    "&k_2 = (x+\\frac{h}{2}, y + \\frac{h}{2}k_1)\\nonumber\\\\\n",
    "&y(x+h) = y(x) + h\\cdot k_2\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "176b20d9",
   "metadata": {},
   "source": [
    "Solve the differential equation\n",
    "\\begin{equation}\n",
    "\\frac{dy}{dt}=t+y\n",
    "\\end{equation}\n",
    "\n",
    "with the initial condition $y(0)=1$, using fourth order Runge-Kutta method from $t=0$ to $t=0.4$ taking $h=0.1$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "312f07a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t         y    \n",
      "------------------\n",
      "0.0    1.000\n",
      "0.1    1.120\n",
      "0.2    1.264\n",
      "0.3    1.435\n",
      "0.4    1.636\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "def model(t, y):\n",
    "    return t + y\n",
    "\n",
    "def rk2Func(x, y, h):\n",
    "    k1 = model(x, y)\n",
    "    k2 = model(x+h, y+k1*h)\n",
    "    y_new = y + k2*h\n",
    "    return y_new\n",
    "\n",
    "t = np.arange(0, 0.4 + 0.1, 0.1)\n",
    "y = np.zeros(len(t))\n",
    "y[0] = 1\n",
    "h = 0.1\n",
    "\n",
    "for i in range(len(t)-1):\n",
    "    y[i+1] = rk2Func(t[i], y[i], h)\n",
    "    \n",
    "# Tabulating the result\n",
    "y = y.reshape([-1,1])\n",
    "t = t.reshape([-1,1])\n",
    "\n",
    "val = np.hstack([t, y])\n",
    "\n",
    "print(\"{0:10s}{1:5s}\".format('t','y'))\n",
    "print('------------------')\n",
    "for i in range(len(val[:,0])):\n",
    "    print(\"{0:0.1f} {1:8.3f}\".format(val[:,0][i], val[:,1][i]))\n",
    "print('------------------')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8433aeb2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
